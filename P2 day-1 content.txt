Lambda Function:-
It is called as anonymous function, when we want to use function concept alone without using a function name there we apply concept of lambda function.

i/p:-
#Anonymous function
L=[1,2,3]
r=map(lambda x:x+x,L)
print(list(r))

#map- helps to create iteration, it returns map

res=map(lambda n:pow(n,2),L)
print(list(res))

name="sam"
(lambda name:print(name))(name)

o/p:-
[2, 4, 6]
[1, 4, 9]
sam

Four pillars of Oops:-
1)Abstraction
2)Encapsulation
3)Inheritance
4)Polymorphism

ABSTRACTION:-
Hiding the implementation part showing what is only required for users is called abstraction.
Ex:- Exe file
* We can make class or method as abstract, opposite to abstract is concrete.
i/p:-
from abc import ABC,abstractmethod
class abstractdemo(ABC):
    @abstractmethod #called decorator to make the method(function) abstract one
    def display(self):
        None
    @abstractmethod
    def show(self):
        None
#changing abstract to concrete
class demo(abstractdemo):
    def display(self):
        print("Abstraction method")
    def show(self):
        print("2nd function")
obj=demo()
obj.display()
obj.show()

o/p:-
Abstraction method
2nd function

ENCAPSULATION:-
* Binding data function into a single entity.
* Public --- one class info can be accessed by any other class
* Private --- can used where it is declared / no in inheritected class
* Protected --- can be accessed only where it got declared......whichever class inherited from this class there also we can use

INHERITANCE:-
Base class and derived class
    Derived class will inherit properties of base class
Base class- parent class
Derived class - child class
Types of inheritance:-
* single inheritance
* multiple inheritance
* multi level inheritance
* heirarical inheritance
* hybrid inheritance

Example for single inheritance:-
1)
i/p:-
#one parent and one child class
class parent:                  #Base class
    def display(self):
     print("Parent class")

#Derived class
class child(parent):           #child inherits property
    def show (self):
        print("Child class")

c=child()                      #c is object for child class
c.display()
c.show()

o/p:-
Parent class
Child class


2)
i/p:-
class A:
    n=30
class B(A):
    def calc(self):
        c=self.n+70
        print(c)
obj=B()
obj.calc()

o/p:-
100
Ex for multi inheritance:-

i/p:-
#two classes - one child - like mom,dad --- child
#inherits properties of mom and dad
class mom:
    def mdisplay(self):
        print("mom class")
class dad:
    def ddisplay(self):
        print("dad class")
class child(mom,dad):
    def cdisplay(self):
        print("Child class")
c1=child()
c1.mdisplay()
c1.ddisplay()
o/p:-
mom class
dad class

Ex for multi-level inheritance:-
i/p:-
#one parent and one child class
class grandparent:
    def display(self):
        print("grandparent class")
class parent(grandparent):
    def show(self):
        print("parent class")
class child(parent):
    def printing(self):
        print("child class")
c=child()
c.display()
c.show()
c.printing()

o/p:-
grandparent class
parent class
child class

Ex for heirarichal inheritance:-
i/p:-
#one base classand multiple child class
#object should be created forchild class individual
class parent:
    def pdisplay(self):
        print("parent class")
class child1(parent):
    def c1show(self):
        print("child1 class")
class child2(parent):
    def c2show(self):
        print("child2 class")
c1=child1()
c1.c1show()
c1.pdisplay()
c2=child2()
c2.c2show()
c2.pdisplay()
o/p:-
child1 class
parent class
child2 class
parent class

Ex for hybrid inheiritance:-
i/p:-
class parent:
    def pdisplay(self):
        print("Parent class")
class child1(parent):
    def c1show(self):
        print("child1 class")
class child2(parent):
    def c2show(self):
        print("child2 class")
class kid1(child1):
    def k1display(self):
        print("kid1 class")
class kid2(child1):
    def k2display(self):
        print("kid2 class")
class kidd1(child2):
    def k1show(self):
        print("kidd1 class")
class kidd2(child2):
    def k2show(self):
        print("kidd2 class")
c1=kid1()
c1.k1display()
c1.c1show()
c1.pdisplay()
c2=kid2()
c2.k2display()
c2.c1show()
c2.pdisplay()
c3=kidd1()
c3.k1show()
c3.c2show()
c3.pdisplay()
c4=kidd2()
c4.k2show()
c4.c2show()
c4.pdisplay()

o/p:-
kid1 class
child1 class
Parent class
kid2 class
child1 class
Parent class
kidd1 class
child2 class
Parent class
kidd2 class
child2 class
Parent class

