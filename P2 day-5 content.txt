Binary tree:-
A node can have maximum only two children.


class BinaryTreeNode:
    def __init__(self,data):
        self.data = data
        self.leftchild = None
        self.rightchild = None
node1 = BinaryTreeNode(50)
node2 = BinaryTreeNode(20)
node3 = BinaryTreeNode(45)
node4 = BinaryTreeNode(11)
node5 = BinaryTreeNode(15)
node6 = BinaryTreeNode(30)
node7 = BinaryTreeNode(78)

node1.leftchild = node2
node1.rightchild = node3
node2.leftchild = node4
node2.rightchild = node5
node3.leftchild = node6
node3.rightchild = node7
print("Root Node is:")
print(node1.data)
print("left child of the node is:")
print(node1.leftchild.data)
print("right child of the node is:")
print(node1.rightchild.data)
print("Node is:")
print(node2.data)
print("left child of the node is:")
print(node2.leftchild.data)
print("right child of the node is:")
print(node2.rightchild.data)
print("Root Node is:")
print(node3.data)
print("left child of the node is:")
print(node3.leftchild.data)
print("right child of the node is:")
print(node3.rightchild.data)
print("Node is:")
print(node4.data)
print("Node is:")
print(node5.data)
print("Root Node is:")
print(node6.data)
print("Node is:")
print(node7.data)

o/p:-
Root Node is:
50
left child of the node is:
20
right child of the node is:
45
Node is:
20
left child of the node is:
11
right child of the node is:
15
Root Node is:
45
left child of the node is:
30
right child of the node is:
78
Node is:
11
Node is:
15
Root Node is:
30
Node is:
78

TRAVERSAL METHODS:-

* Inorder ::  Left-Root-Right (LDR)
* Preorder  :: Root-Left-Right (DLR)
* Postorder :: Left-Right-Root (LRD)

i/p:-
class node:
    def __init__(self, key):
        self.left = None
        self.right = None
        self.val = key
def printInorder(root):
    if root:
        #First recursive on left child
        printInorder(root.left)
        #then print the data of node
        print(root.val,end=" "),
        #now recur on right child
        printInorder(root.right)
def printPostorder(root):
    if root:
        #First recursive on left child
        printPostorder(root.left)
        #then recur on right child
        printPostorder(root.right)
        #now print the data of node
        print(root.val,end=" "),
def printPreorder(root):
    if root:
        #First print the data of node
        print(root.val,end=" "),
        #then recursive on left child
        printPreorder(root.left)
        #now recur on right child
        printPreorder(root.right)
root = node(1)
root.left = node(2)
root.right = node(3)
root.left.left = node(4)
root.left.right = node(5)
print("PRE-ORDER:")
printPreorder(root)
print()
print("\nIN-ORDER:")
printInorder(root)
print()
print("\nPOST-ORDER:")
printPostorder(root)

o/p:-
PRE-ORDER:
1 2 4 5 3 

IN-ORDER:
4 2 5 1 3 

POST-ORDER:
4 5 2 3 1 

TYPES OF BINARY TREE :-
* Full Binary Tree :-
                  All the nodes will have 0 or 2 children(nodes).
* Degenerate / Patological Tree :-
                  All the nodes will have 0 or 1 child(node).
* Skewed Binary Tree :-
                  In which patological binary tree is either in left side or right side only. It is of two types.
    1) Left-skewed binary tree
    2) Right-skewed binary tree
* Complete Binary Tree :-
                  a) In last level if it is incomplete, nodes should present at extreme left.
                  b) All levels must be full except last level.
* Perfect Binary Tree :-
                  a) All internal nodes those who have two children.
                  b) Leaf nodes must be at same level.
* Balanced Binary Tree :-
                  For all the nodes height of left sub tree minus height of right sub tree can be 0 or 1.

APPLICATIONS OF BINARY TREE :-
1) Binary search tree :-
                  a) All the left side elements should be lesser than parent.
                  b) All the right side elements should be greater than parent.

i/p:-
#BTS-INSERT

class node:
    def __init__(self,key):
        self.left = None
        self.right = None
        self.val = key
def insert(root, key):
    if root is None:
        return node(key)
    else:
        if root.val == key:
            return root
        elif root.val < key:
            root.right = insert(root.right, key)
        else:
            root.left = insert(root.left, key)
    return root
#Inorder-traversal
def inorder(root):
    if root:
        inorder(root.left)
        print(root.val)
        inorder(root.right)
r = node(50)
r = insert(r, 30)
r = insert(r, 20)
r = insert(r, 40)
r = insert(r, 60)
r = insert(r, 70)
r = insert(r, 80)
inorder(r)

o/p:-
20
30
40
50
60
70
80



